% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/point_metrics.R
\name{point_metrics}
\alias{point_metrics}
\title{Point-based metrics}
\usage{
point_metrics(las, func, k = 8)
}
\arguments{
\item{las}{An object of class LAS}

\item{func}{formula. An expression to be applied to each cell (see section "Parameter func").}

\item{k}{integer. k-nearest neighbours}
}
\description{
Computes a series of user-defined descriptive statistics for a LiDAR dataset for each point. This
function is very similar to \link{grid_metrics} but compute metrics \bold{for each point} based on
its k-nearest neighbours.\cr\cr
}
\details{
It is important to bare in mind that this function is very fast for the feature it provides i.e.
mapping a user-defined function at the point level using optimized memory management. However it
is computationnaly demanding anyway.\cr\cr
To help user to get an idea of how compuation demanding this function is let compare to
\link{grid_metrics}. Assuming we want to apply \code{mean(Z)} on a 1 km² tile with 1 points/m²
with a resolution of 20 m (400 m² cells), then the function \code{mean} is called roughtly 2500
times (once  per cell). On the contrary with \code{point_metrics},  \code{mean} is called 1000000
times (once per point). So the function is expected to be roughly 400 times slower in this specific
case (but it does not provide the same feature).\cr\cr
This is why the user-defined function is expected to be well optimized otherwise it might drastically
slow down this already heavy computation. See examples.\cr\cr
Last but not least, \code{grid_metrics()} relies on the \code{data.table} package to compute
user-defined function in each pixel. \code{point_metrics()} relies on a similar method but with a
major difference: is does not relies on \code{data.table} and thus has not been tested for years
by thoushand of people. Please report bugs if any.
}
\section{Parameter \code{func}}{

The function to be applied to each cell is a classical function (see examples) that
returns a labeled list of metrics. For example, the following function \code{f} is correctly formed.
\preformatted{
f = function(x) {list(mean = mean(x), max = max(x))}
}
And could be applied either on the \code{Z} coordinates or on the intensities. These two
statements are valid:
\preformatted{
point_metrics(las, ~f(Z), k = 8)
point_metrics(las, ~f(Intensity), k = 5)
}
Everything that works in \link{grid_metrics} should work as well in \code{point_metrics} but might
be meaningless. For example computing the quantile of elevation does not really makes sense here.
}

